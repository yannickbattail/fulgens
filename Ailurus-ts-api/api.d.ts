/**
 * Ailurus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/// <reference path="../custom.d.ts" />
import { Configuration } from "./configuration";
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}
/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected fetch: FetchAPI;
    protected configuration: Configuration;
    constructor(configuration?: Configuration, basePath?: string, fetch?: FetchAPI);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: "RequiredError";
    constructor(field: string, msg?: string);
}
/**
 *
 * @export
 * @interface GlobalInstruction
 */
export interface GlobalInstruction {
    /**
     *
     * @type {string}
     * @memberof GlobalInstruction
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof GlobalInstruction
     */
    droneName?: string;
    /**
     *
     * @type {ICoordinate}
     * @memberof GlobalInstruction
     */
    destination?: ICoordinate;
}
/**
 *
 * @export
 * @interface ICoordinate
 */
export interface ICoordinate {
}
/**
 *
 * @export
 * @interface IDroneDto
 */
export interface IDroneDto {
    /**
     *
     * @type {string}
     * @memberof IDroneDto
     */
    name?: string;
    /**
     *
     * @type {IInstruction}
     * @memberof IDroneDto
     */
    lastInstruction?: IInstruction;
    /**
     *
     * @type {ICoordinate}
     * @memberof IDroneDto
     */
    currentPosition?: ICoordinate;
    /**
     *
     * @type {number}
     * @memberof IDroneDto
     */
    state?: IDroneDto.StateEnum;
    /**
     *
     * @type {number}
     * @memberof IDroneDto
     */
    speed?: number;
    /**
     *
     * @type {number}
     * @memberof IDroneDto
     */
    storageSize?: number;
    /**
     *
     * @type {ResourceQuantity}
     * @memberof IDroneDto
     */
    storage?: ResourceQuantity;
}
/**
 * @export
 * @namespace IDroneDto
 */
export declare namespace IDroneDto {
    /**
     * @export
     * @enum {string}
     */
    enum StateEnum {
        NUMBER_0,
        NUMBER_1
    }
}
/**
 *
 * @export
 * @interface IInstruction
 */
export interface IInstruction {
    /**
     *
     * @type {string}
     * @memberof IInstruction
     */
    type?: string;
    /**
     *
     * @type {Date}
     * @memberof IInstruction
     */
    startedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof IInstruction
     */
    endAt?: Date;
    /**
     *
     * @type {number}
     * @memberof IInstruction
     */
    duration?: number;
    /**
     *
     * @type {number}
     * @memberof IInstruction
     */
    progression?: number;
    /**
     *
     * @type {Date}
     * @memberof IInstruction
     */
    abortedAt?: Date;
    /**
     *
     * @type {boolean}
     * @memberof IInstruction
     */
    isAborted?: boolean;
}
/**
 *
 * @export
 * @interface IItem
 */
export interface IItem {
    /**
     *
     * @type {string}
     * @memberof IItem
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof IItem
     */
    name?: string;
    /**
     *
     * @type {ICoordinate}
     * @memberof IItem
     */
    position?: ICoordinate;
}
/**
 *
 * @export
 * @interface IMapInfo
 */
export interface IMapInfo {
    /**
     *
     * @type {string}
     * @memberof IMapInfo
     */
    name?: string;
    /**
     *
     * @type {TupleICoordinateICoordinate}
     * @memberof IMapInfo
     */
    dimensions?: TupleICoordinateICoordinate;
    /**
     *
     * @type {ICoordinate}
     * @memberof IMapInfo
     */
    droneSpawnPoint?: ICoordinate;
    /**
     *
     * @type {Array&lt;IItem&gt;}
     * @memberof IMapInfo
     */
    items?: Array<IItem>;
}
/**
 *
 * @export
 * @interface IPlayerContextDto
 */
export interface IPlayerContextDto {
    /**
     *
     * @type {Array&lt;IDroneDto&gt;}
     * @memberof IPlayerContextDto
     */
    drones?: Array<IDroneDto>;
    /**
     *
     * @type {string}
     * @memberof IPlayerContextDto
     */
    playerName?: string;
    /**
     *
     * @type {Array&lt;ResourceQuantity&gt;}
     * @memberof IPlayerContextDto
     */
    resources?: Array<ResourceQuantity>;
}
/**
 *
 * @export
 * @interface ResourceQuantity
 */
export interface ResourceQuantity {
    /**
     *
     * @type {number}
     * @memberof ResourceQuantity
     */
    resource?: ResourceQuantity.ResourceEnum;
    /**
     *
     * @type {number}
     * @memberof ResourceQuantity
     */
    quantity?: number;
}
/**
 * @export
 * @namespace ResourceQuantity
 */
export declare namespace ResourceQuantity {
    /**
     * @export
     * @enum {string}
     */
    enum ResourceEnum {
        NUMBER_0,
        NUMBER_1
    }
}
/**
 *
 * @export
 * @interface TupleICoordinateICoordinate
 */
export interface TupleICoordinateICoordinate {
    /**
     *
     * @type {ICoordinate}
     * @memberof TupleICoordinateICoordinate
     */
    item1?: ICoordinate;
    /**
     *
     * @type {ICoordinate}
     * @memberof TupleICoordinateICoordinate
     */
    item2?: ICoordinate;
}
/**
 * AilurusApi - fetch parameter creator
 * @export
 */
export declare const AilurusApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {Array&lt;GlobalInstruction&gt;} instructions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instructionsPost(instructions: GlobalInstruction[], options?: any): FetchArgs;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mapGet(options?: any): FetchArgs;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playerContextGet(options?: any): FetchArgs;
};
/**
 * AilurusApi - functional programming interface
 * @export
 */
export declare const AilurusApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {Array&lt;GlobalInstruction&gt;} instructions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instructionsPost(instructions: GlobalInstruction[], options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string[]>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mapGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IMapInfo>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playerContextGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IPlayerContextDto>;
};
/**
 * AilurusApi - factory interface
 * @export
 */
export declare const AilurusApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @param {Array&lt;GlobalInstruction&gt;} instructions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instructionsPost(instructions: GlobalInstruction[], options?: any): Promise<string[]>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mapGet(options?: any): Promise<IMapInfo>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playerContextGet(options?: any): Promise<IPlayerContextDto>;
};
/**
 * AilurusApi - object-oriented interface
 * @export
 * @class AilurusApi
 * @extends {BaseAPI}
 */
export declare class AilurusApi extends BaseAPI {
    /**
     *
     * @param {} instructions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AilurusApi
     */
    instructionsPost(instructions: Array<GlobalInstruction>, options?: any): Promise<string[]>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AilurusApi
     */
    mapGet(options?: any): Promise<IMapInfo>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AilurusApi
     */
    playerContextGet(options?: any): Promise<IPlayerContextDto>;
}
