/**
 * Ailurus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');
import Promise = require('bluebird');

let defaultBasePath = 'https://localhost';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */
let primitives = [
                    "string",
                    "boolean",
                    "double",
                    "integer",
                    "long",
                    "float",
                    "number",
                    "any"
                 ];

class ObjectSerializer {

    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return data.toString();
        } else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }

            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance: {[index: string]: any} = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap[type]) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}

export class CoordinateInt2D {
    'x': number;
    'y': number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "x",
            "baseName": "x",
            "type": "number"
        },
        {
            "name": "y",
            "baseName": "y",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return CoordinateInt2D.attributeTypeMap;
    }
}

export class GlobalInstructionCoordinateInt2D {
    'type': string;
    'droneName': string;
    'destination': CoordinateInt2D;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "droneName",
            "baseName": "droneName",
            "type": "string"
        },
        {
            "name": "destination",
            "baseName": "destination",
            "type": "CoordinateInt2D"
        }    ];

    static getAttributeTypeMap() {
        return GlobalInstructionCoordinateInt2D.attributeTypeMap;
    }
}

export class IDroneDtoCoordinateInt2D {
    'name': string;
    'lastInstruction': IInstructionCoordinateInt2D;
    'currentPosition': CoordinateInt2D;
    'state': IDroneDtoCoordinateInt2D.StateEnum;
    'speed': number;
    'storageSize': number;
    'storage': ResourceQuantity;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "lastInstruction",
            "baseName": "lastInstruction",
            "type": "IInstructionCoordinateInt2D"
        },
        {
            "name": "currentPosition",
            "baseName": "currentPosition",
            "type": "CoordinateInt2D"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "IDroneDtoCoordinateInt2D.StateEnum"
        },
        {
            "name": "speed",
            "baseName": "speed",
            "type": "number"
        },
        {
            "name": "storageSize",
            "baseName": "storageSize",
            "type": "number"
        },
        {
            "name": "storage",
            "baseName": "storage",
            "type": "ResourceQuantity"
        }    ];

    static getAttributeTypeMap() {
        return IDroneDtoCoordinateInt2D.attributeTypeMap;
    }
}

export namespace IDroneDtoCoordinateInt2D {
    export enum StateEnum {
        NUMBER_0 = <any> 0,
        NUMBER_1 = <any> 1
    }
}
export class IInstructionCoordinateInt2D {
    'type': string;
    'startedAt': Date;
    'endAt': Date;
    'duration': number;
    'progression': number;
    'abortedAt': Date;
    'isAborted': boolean;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "startedAt",
            "baseName": "startedAt",
            "type": "Date"
        },
        {
            "name": "endAt",
            "baseName": "endAt",
            "type": "Date"
        },
        {
            "name": "duration",
            "baseName": "duration",
            "type": "number"
        },
        {
            "name": "progression",
            "baseName": "progression",
            "type": "number"
        },
        {
            "name": "abortedAt",
            "baseName": "abortedAt",
            "type": "Date"
        },
        {
            "name": "isAborted",
            "baseName": "isAborted",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return IInstructionCoordinateInt2D.attributeTypeMap;
    }
}

export class IItemCoordinateInt2D {
    'type': string;
    'name': string;
    'position': CoordinateInt2D;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "position",
            "baseName": "position",
            "type": "CoordinateInt2D"
        }    ];

    static getAttributeTypeMap() {
        return IItemCoordinateInt2D.attributeTypeMap;
    }
}

export class IMapInfoCoordinateInt2D {
    'name': string;
    'dimensions': TupleCoordinateInt2DCoordinateInt2D;
    'droneSpawnPoint': CoordinateInt2D;
    'items': Array<IItemCoordinateInt2D>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "dimensions",
            "baseName": "dimensions",
            "type": "TupleCoordinateInt2DCoordinateInt2D"
        },
        {
            "name": "droneSpawnPoint",
            "baseName": "droneSpawnPoint",
            "type": "CoordinateInt2D"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<IItemCoordinateInt2D>"
        }    ];

    static getAttributeTypeMap() {
        return IMapInfoCoordinateInt2D.attributeTypeMap;
    }
}

export class IPlayerContextDtoCoordinateInt2D {
    'drones': Array<IDroneDtoCoordinateInt2D>;
    'playerName': string;
    'resources': Array<ResourceQuantity>;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "drones",
            "baseName": "drones",
            "type": "Array<IDroneDtoCoordinateInt2D>"
        },
        {
            "name": "playerName",
            "baseName": "playerName",
            "type": "string"
        },
        {
            "name": "resources",
            "baseName": "resources",
            "type": "Array<ResourceQuantity>"
        }    ];

    static getAttributeTypeMap() {
        return IPlayerContextDtoCoordinateInt2D.attributeTypeMap;
    }
}

export class ResourceQuantity {
    'resource': ResourceQuantity.ResourceEnum;
    'quantity': number;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "resource",
            "baseName": "resource",
            "type": "ResourceQuantity.ResourceEnum"
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return ResourceQuantity.attributeTypeMap;
    }
}

export namespace ResourceQuantity {
    export enum ResourceEnum {
        NUMBER_0 = <any> 0,
        NUMBER_1 = <any> 1
    }
}
export class TupleCoordinateInt2DCoordinateInt2D {
    'item1': CoordinateInt2D;
    'item2': CoordinateInt2D;

    static discriminator = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "item1",
            "baseName": "item1",
            "type": "CoordinateInt2D"
        },
        {
            "name": "item2",
            "baseName": "item2",
            "type": "CoordinateInt2D"
        }    ];

    static getAttributeTypeMap() {
        return TupleCoordinateInt2DCoordinateInt2D.attributeTypeMap;
    }
}


let enumsMap: {[index: string]: any} = {
        "IDroneDtoCoordinateInt2D.StateEnum": IDroneDtoCoordinateInt2D.StateEnum,
        "ResourceQuantity.ResourceEnum": ResourceQuantity.ResourceEnum,
}

let typeMap: {[index: string]: any} = {
    "CoordinateInt2D": CoordinateInt2D,
    "GlobalInstructionCoordinateInt2D": GlobalInstructionCoordinateInt2D,
    "IDroneDtoCoordinateInt2D": IDroneDtoCoordinateInt2D,
    "IInstructionCoordinateInt2D": IInstructionCoordinateInt2D,
    "IItemCoordinateInt2D": IItemCoordinateInt2D,
    "IMapInfoCoordinateInt2D": IMapInfoCoordinateInt2D,
    "IPlayerContextDtoCoordinateInt2D": IPlayerContextDtoCoordinateInt2D,
    "ResourceQuantity": ResourceQuantity,
    "TupleCoordinateInt2DCoordinateInt2D": TupleCoordinateInt2DCoordinateInt2D,
}

export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: localVarRequest.Options): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: localVarRequest.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string;

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey;
        } else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string;

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}

export class VoidAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(_: localVarRequest.Options): void {
        // Do nothing
    }
}

export enum AilurusApiApiKeys {
}

export class AilurusApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: AilurusApiApiKeys, value: string) {
        (this.authentications as any)[AilurusApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @param instructions 
     */
    public instructionsPost (instructions: Array<GlobalInstructionCoordinateInt2D>) : Promise<{ response: http.ClientResponse; body: Array<string>;  }> {
        const localVarPath = this.basePath + '/instructions';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'instructions' is not null or undefined
        if (instructions === null || instructions === undefined) {
            throw new Error('Required parameter instructions was null or undefined when calling instructionsPost.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(instructions, "Array<GlobalInstructionCoordinateInt2D>")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<string>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<string>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     */
    public mapGet () : Promise<{ response: http.ClientResponse; body: IMapInfoCoordinateInt2D;  }> {
        const localVarPath = this.basePath + '/map';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IMapInfoCoordinateInt2D;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IMapInfoCoordinateInt2D");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     */
    public playerContextGet () : Promise<{ response: http.ClientResponse; body: IPlayerContextDtoCoordinateInt2D;  }> {
        const localVarPath = this.basePath + '/playerContext';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IPlayerContextDtoCoordinateInt2D;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IPlayerContextDtoCoordinateInt2D");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
